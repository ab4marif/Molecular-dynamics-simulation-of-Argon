import numpy as np
import matplotlib.pyplot as plt

# constansts
eps = 119.8*1.38*10**-23
sigma = 3.405E-10
mass = 6.6E-26
dt = 0.001
N = 2 #num particles
Nt = 1 #number of time steps
L = 1 # length box

def calcforce(x,y,N):
    
    eps = 119.8*1.38*10**-23
    sigma = 3.405E-10
    
    r = np.sqrt(x**2 + y**2) #distance r to the origin
    ba, bb = np.meshgrid(r,r)
    bt = bb.T
    rmatrix = np.abs(bb-bt) # distance matrix


    # from the distance matrix calculate the potential in the x and y direction to calculate the force in both directions
    np.fill_diagonal(rmatrix,1)
    delumatrix_x = 4*eps*x*(6*sigma**6/rmatrix**8 - 12*sigma**12/rmatrix**14 )
    delumatrix_y = 4*eps*y*(6*sigma**6/rmatrix**8 - 12*sigma**12/rmatrix**14 )
    np.fill_diagonal(delumatrix_x,0)
    np.fill_diagonal(delumatrix_y,0)

    Fx = np.zeros(N)
    Fy = np.zeros(N)
    for i in range(N):
        Fx[i:] = -np.sum(delumatrix_x[i])
        Fy[i:] = -np.sum(delumatrix_y[i])

    return Fx, Fy


x = np.random.random(N) # initial x position of particles
y = np.random.random(N)
vx = np.random.random(N)
vy = np.random.random(N)

for time in range(Nt):
    Fx, Fy = calcforce(x,y,N)

    for j in range(N):
        vx[j] = vx[j] + 1/mass*Fx[j]*dt
        vy[j] = vy[j] + 1/mass*Fy[j]*dt


    for j in range(N):
        x[j] = x[j] + vx[j]*dt
        y[j] = y[j] + vy[j]*dt
        # boundary conditions
        if x[i] > L:
            x[i] = x[i] - L
        elif y[i] > L:
            y[i] = y[i] - L

    plt.plot(x,y,'ro')

print(vx)
print('')
print(x)
print('')
print(y)